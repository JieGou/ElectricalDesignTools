<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <sys:Double x:Key="buttonHeight">27</sys:Double>

    <!--ALL CONTROLS DEFAULT-->
    <Style x:Key="DefaultStyle" TargetType="{x:Type Control}">
        <Setter Property="Margin" Value="10 10 10 10 "/>
    </Style>

    <Style TargetType="ListBox" BasedOn="{StaticResource DefaultStyle}"/>

    <!--TITLE Label Style-->
    <Style TargetType="Label" x:Key="TitleLabelStyleBase">
        <Setter Property ="FontSize" Value="15"/>
        <Setter Property ="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property= "Margin" Value="0,0,0,0"/>
        <Setter Property="Padding" Value="20, 7, 10, 7"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="0,2,0,2"/>
        <Setter Property= "HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>

    <!--TEXTBOX Style with Error -->
    <Style x:Key="TextBoxBaseErrorTemplate" TargetType="TextBox" BasedOn="{StaticResource DefaultStyle}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <Border BorderBrush="Red"/>
                        <!-- Align text box and error list vertically -->
                        <StackPanel Orientation="Vertical">
                            <AdornedElementPlaceholder x:Name="textBox"/>
                            <ItemsControl ItemsSource="{Binding}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding ErrorContent}" Foreground="#FFD40000"/>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </StackPanel>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--TEXTBOX Style with Error -->
    <Style TargetType="TextBox" BasedOn="{StaticResource TextBoxBaseErrorTemplate}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!--COMBOBOX with Error-->
    <Style TargetType="ComboBox">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <!-- Align text box and error list vertically -->
                    <StackPanel Orientation="Vertical">
                        <AdornedElementPlaceholder x:Name="textBox"/>
                        <ItemsControl ItemsSource="{Binding}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding ErrorContent}" Foreground="#FFD40000"/>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Base Button Style-->
    <Style x:Key="BaseButtonStyle"  TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultStyle}">
        <Setter Property="Width" Value="125"/>
        <Setter Property="Height" Value="27"/>
        <Setter Property="Margin" Value="10 5"/>
        <!--<Setter Property="Background" Value="Transparent"/>-->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="5" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="Black" 
                            BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="AliceBlue"/>
                <Setter Property="Foreground" Value="black"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="DarkGray"/>
                <Setter Property="Foreground" Value="LightGray"/>

            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Red Button Style-->
    <Style x:Key="RedButton"  TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Background" Value="#FFF7C1C1"/>
    </Style>

    <!--Tool Bar Button-->
    <Style x:Key="ToolBarButtonBase" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="Button">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="MinHeight" Value="35"/>
        <Setter Property="Focusable" Value="False"/>
        <!--<Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <!--BUTTON Main Menu Animation-->
    <Style x:Key="MainMenu_Buttons" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Opacity="1" Color="black"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" >
            <Setter.Value>
                <SolidColorBrush Opacity="1" Color="LightGray" />
                <!--<SolidColorBrush Opacity="1" Color="#FF0A669B" />-->
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="border"
                            SnapsToDevicePixels="True"
                            Margin="0 0 0 10"
                             Padding="15,5,15,5"
                             BorderBrush="black"
                             BorderThickness="2,2,2,2"
                             CornerRadius="0"
                             Background="{TemplateBinding Background}">
                        <Grid>
                            <ContentPresenter 
                                Margin="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                RecognizesAccessKey="True">
                            </ContentPresenter>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="#FFB7DEE8"
                                        Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                        FillBehavior="HoldEnd" Duration="0:0:0.15" AutoReverse="False" RepeatBehavior="1x"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            FillBehavior="HoldEnd" Duration="0:0:0.15" AutoReverse="False" RepeatBehavior="1x"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>

            </Trigger>


        </Style.Triggers>
    </Style>

    <!--BUTTON Round Button-->
    <Style x:Key="Round_Buttons" TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultStyle}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Opacity="1" Color="black"/>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="FontWeight" Value="DemiBold"/>-->
        <Setter Property="Background" >
            <Setter.Value>
                <SolidColorBrush Opacity="1" Color="#FFB7DEE8" />
                <!--<SolidColorBrush Opacity="1" Color="#FF0A669B" />-->
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="border"
                            Height="{StaticResource buttonHeight}"
                            SnapsToDevicePixels="True"
                            Margin="0 0 0 0"
                            Padding="0"
                            BorderBrush="#FF215968"
                            BorderThickness="2,2,2,2"
                            CornerRadius="13"
                            Background="{TemplateBinding Background}">
                        <Grid>
                            <ContentPresenter 
                                Margin="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                RecognizesAccessKey="True">
                            </ContentPresenter>
                        </Grid>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--<Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="LightSeaGreen"
                                        Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                        FillBehavior="HoldEnd" Duration="0:0:0.15" AutoReverse="False" RepeatBehavior="1x"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            FillBehavior="HoldEnd" Duration="0:0:0.15" AutoReverse="False" RepeatBehavior="1x"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>-->
    </Style>

   

    <!--Textblock Base Style-->
    <Style TargetType="TextBlock">
        <!--<Setter Property ="FontSize" Value="25"/>-->
    </Style>

    <!--Textblock Label Style-->
    <Style TargetType="TextBlock" x:Key="txtDteqLabelStyle">
        <!--<Setter Property ="FontSize" Value="25"/>-->
        <Setter Property="TextAlignment" Value="Right"/>

    </Style>

    <!--Textblock Data Style-->
    <Style TargetType="TextBlock" x:Key="txtDteqDataStyle">
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="TextAlignment" Value="Left"/>
    </Style>


    <!--Label Dteq Label Style-->
    <Style TargetType="Label" x:Key="lblDteqLabelStyle" BasedOn="{StaticResource DefaultStyle}">
        <Setter Property ="FontSize" Value="15"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property= "HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
    </Style>

    <!--Lable Dteq Data Style-->
    <Style TargetType="Label" x:Key="lblDteqDataStyle" BasedOn="{StaticResource DefaultStyle}">
        <Setter Property ="FontSize" Value="15"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property= "HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>



    


    <!--DATA GRID Style-->
    <Style TargetType="DataGrid" x:Key="DataGridStyleBase" BasedOn="{StaticResource DefaultStyle}">
        <Setter Property="Background" Value="DarkGray"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="RowHeaderWidth" Value="20"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="SelectionUnit" Value="FullRow"/>
        <Setter Property="MinRowHeight" Value="18"/>
        <Setter Property="GridLinesVisibility" Value="All"/>
        <Setter Property="HorizontalGridLinesBrush" Value="LightGray" />
        <Setter Property="VerticalGridLinesBrush" Value="LightGray" />
        <Setter Property="RowHeight" Value="20"/>
        <Setter Property="CanUserResizeRows" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!--Column Header-->
    <Style TargetType="DataGridColumnHeader" x:Key="DataGridColumnHeaderBase">
        <Setter Property="BorderBrush" Value="black" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="5 2 5 2"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true" >
                <Setter Property="Background" Value="#FF449AE6"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Row Header-->
    <Style TargetType="DataGridRowHeader">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="BorderThickness" Value="0 0 1 0" />
    </Style>

    <!--Cell-->
    <Style TargetType="{x:Type DataGridCell}" x:Key="DataGridCellBase">
        <Setter Property="FontSize" Value="11.5"/>
        <Setter Property="TextBlock.TextAlignment" Value="Center"/>
        <Setter Property="TextBlock.Padding" Value="10,10,10,10"/>
        <Setter Property="Padding" Value="50"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Padding="{TemplateBinding Padding}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#FFB7DEE8"/>
                <Setter Property="Foreground" Value="black"/>
                <Setter Property="FontWeight" Value="Regular"/>

            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD6EDF3"/>
                <Setter Property="Foreground" Value="black"/>
                <Setter Property="FontWeight" Value="Regular"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--x:Key="DataGridRowBase"-->
    <Style TargetType="{x:Type DataGridRow}" >
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#FFB7DEE8"/>
                <Setter Property="Foreground" Value="black"/>
                <Setter Property="FontWeight" Value="Regular"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="AliceBlue"/>
                <Setter Property="Foreground" Value="black"/>
                <Setter Property="FontWeight" Value="Regular"/>
            </Trigger>
        </Style.Triggers>
    </Style>
        
    <Style x:Key="ColumnElementStyle" TargetType="TextBlock">
        <Setter Property="Margin" Value="10,0,10,0" />
    </Style>

    
    <LinearGradientBrush x:Key="HeaderBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#FF6B8E95" Offset="0"/>
        <GradientStop Color="#FF14A7C1" Offset="1"/>
        <GradientStop Color="#FF1E424E" Offset="0.509"/>
        <GradientStop Color="#FF1D4855" Offset="0.542"/>
        <GradientStop Color="#FF193A44" Offset="0.526"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HeaderBorderBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#FF1D1D1D" Offset="0.014"/>
        <GradientStop Color="#FF007F96" Offset="0.553"/>
        <GradientStop Color="#FF0AEAFA" Offset="1"/>
    </LinearGradientBrush>
    
    
    
    
    
    
    
    
    
    
    
    
</ResourceDictionary>