<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    
                    xmlns:converters="clr-namespace:WpfUI.Converters"
                    xmlns:controls="clr-namespace:WpfUI.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="EdtColorsAndDimensions.xaml"/>
        
                                            
    </ResourceDictionary.MergedDictionaries>

    
    
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <converters:WarningIdentifierConverter x:Key="WarningIdentifierConverter"/>
    <converters:WarningStringConverter x:Key="WarningStringConverter"/>


    <!--ALL CONTROLS DEFAULT-->
    <Style x:Key="DefaultStyle" TargetType="{x:Type Control}">
        <!--<Setter Property="Margin" Value="10 10 10 10 "/>-->
    </Style>

    <Style TargetType="ListBox" BasedOn="{StaticResource DefaultStyle}"/>

    <!--SUB-MENU TITLE Style-->
    <Style TargetType="Label" x:Key="TitleLabelStyleBase">
        <!--<Setter Property ="FontSize" Value="14"/>
        <Setter Property ="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property= "Margin" Value="0,0,0,0"/>
        <Setter Property="Padding" Value="20, 0, 10, 0"/>

        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="0,2,0,2"/>

        <Setter Property= "HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>-->
    </Style>

    <!--PAGE TITLE Style-->
    <Style TargetType="TextBlock" x:Key="PageTitleStyle">
        <!--<Setter Property ="FontSize" Value="15"/>
        <Setter Property ="Foreground" Value="Black"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property= "Margin" Value="20,0,0,0"/>-->
    </Style>


    <!--TEXTBOX Style with Error -->
    <Style x:Key="TextBoxBaseErrorTemplate" TargetType="TextBox" BasedOn="{StaticResource DefaultStyle}">
        
        <!--<Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                         Align text box and error list vertically 
                        <StackPanel Orientation="Vertical">
                            <AdornedElementPlaceholder x:Name="textBox"/>
                            <ItemsControl ItemsSource="{Binding}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <StackPanel>
                                            Error
                                            <StackPanel Orientation="Horizontal"
                                                        Visibility="{Binding ErrorContent, Converter={StaticResource WarningIdentifierConverter}, ConverterParameter=Error}" >
                                                <Image Source="..\..\ResourceFiles\ErrorIconTriangle48.png"
                                                       Height="13"
                                                       Margin="0 0 3 0"/>
                                                <TextBlock Text="{Binding ErrorContent}" Foreground="{StaticResource ErrorColor_Base}"
                                                           Visibility="{Binding ErrorContent, Converter={StaticResource WarningIdentifierConverter}, ConverterParameter=Error}" />
                                            </StackPanel>
                                            Warning
                                            <StackPanel Orientation="Horizontal"
                                                        Visibility="{Binding ErrorContent, Converter={StaticResource WarningIdentifierConverter}, ConverterParameter=Warning}" >
                                                <Image Source="..\..\ResourceFiles\WarningIcon48.png"
                                                       Height="13"
                                                       Margin="0 0 3 0"/>
                                                <TextBlock Text="{Binding ErrorContent, Converter={StaticResource WarningStringConverter}}" FontSize="12" Foreground="DarkOrange"/>
                                            </StackPanel>
                                        </StackPanel>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </StackPanel>
                       
                    </DockPanel>
                </ControlTemplate>
                
                
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <!--TEXTBOX Style with Error -->
    <Style TargetType="TextBox" BasedOn="{StaticResource TextBoxBaseErrorTemplate}">
        <!--<Setter Property="FontSize" Value="12"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>-->
    </Style>

    <!--TEXTBOX - DataGrid Header Filter -->
    <Style x:Key="FilterTextBoxBase" TargetType="TextBox" BasedOn="{StaticResource TextBoxBaseErrorTemplate}">
        <!--<Setter Property="FontSize" Value="12"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Grid.Row" Value="1"/>
        <Setter Property="Grid.Column" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="MinHeight" Value="17"/>
        <Setter Property="Margin" Value="0 1 1 1"/>
        <Setter Property="ToolTip" Value="Filter - Enter to apply, ESC to clear."/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="150"/>-->
    </Style>

    
    <!--COMBOBOX with Error-->
    <Style TargetType="ComboBox">
        <!--<Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    --><!-- Align text box and error list vertically --><!--
                    <StackPanel Orientation="Vertical">
                        <AdornedElementPlaceholder x:Name="textBox"/>
                        <ItemsControl ItemsSource="{Binding}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding ErrorContent}" Foreground="#FFD40000"/>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)[0].ErrorContent}"/>
                <Setter Property="ToolTipService.InitialShowDelay" Value="25"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>

    
    
    <!--BUTTONS-->
    <!--Smaller ComboBox for Detail Views-->
    <Style TargetType="ComboBox" x:Key="SmallComboBox">
        <Setter Property="Padding" Value="3 1"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Margin" Value="0 3"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="500"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
    </Style>
    <!--Tool Bar / Sub-Menu Button-->
    <Style x:Key="ToolBarButtonBase" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="Button">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="MinHeight" Value="{StaticResource SubMenuButtonHeight}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Padding" Value="10 0"/>
    </Style>

    <!--Main Menu Button Dark-->
    <Style x:Key="MainMenuButton" TargetType="ToggleButton" >
        <Setter Property="Foreground" Value="Gray"/>
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Padding" Value="10 0"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="Transparent" 
                            BorderThickness="1 0"
                            BorderBrush="Transparent"
                            Padding="0">
                        <!-- define your not selected template here...-->
                        <TextBlock Text="{Binding Path=Content,
                                                    RelativeSource={RelativeSource TemplatedParent}, 
                                                    Mode=TwoWay,
                                                    UpdateSourceTrigger=PropertyChanged}"
                                   TextAlignment="Center"
                                   VerticalAlignment="Center"
                                   Margin="5 0"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="White"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Border Background="Transparent"
                                    BorderBrush="Transparent"
                                    BorderThickness="1 0"
                                    Padding="0">
                                <!--<Border Background="{StaticResource ComboBox.MouseOver.Background}">-->
                                <TextBlock Text="{Binding Path=Content,
                                                    RelativeSource={RelativeSource TemplatedParent}, 
                                                    Mode=TwoWay,
                                                    UpdateSourceTrigger=PropertyChanged}"
                                       TextAlignment="Center"
                                       VerticalAlignment="Center"
                                       Margin="5 0"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="White"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Border Background="Transparent"
                                    BorderBrush="Black"
                                    BorderThickness="1 0"
                                    Padding="0">
                                <!--<Border Background="{StaticResource ComboBox.MouseOver.Background}">-->
                                <TextBlock Text="{Binding Path=Content,
                                                    RelativeSource={RelativeSource TemplatedParent}, 
                                                    Mode=TwoWay,
                                                    UpdateSourceTrigger=PropertyChanged}"
                                       TextAlignment="Center"
                                       VerticalAlignment="Center"
                                       Margin="5 0"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="DarkGray"/>
                <Setter Property="Foreground" Value="LightGray"/>
            </Trigger>

        </Style.Triggers>
    </Style>

    <!--Main Menu Button Light-->
    <Style x:Key="MainMenuButtonLight" TargetType="ToggleButton" >
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Padding" Value="10 0"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="Transparent" 
                            BorderThickness="1 0"
                            BorderBrush="Transparent"
                            Padding="0">
                        <!-- define your not selected template here...-->
                        <TextBlock Text="{Binding Path=Content,
                                                    RelativeSource={RelativeSource TemplatedParent}, 
                                                    Mode=TwoWay,
                                                    UpdateSourceTrigger=PropertyChanged}"
                                   TextAlignment="Center"
                                   VerticalAlignment="Center"
                                   Margin="5 0"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Border Background="{DynamicResource ComboBox.MouseOver.Background}"
                                    BorderBrush="Transparent"
                                    BorderThickness="1 0"
                                    Padding="0">
                                <!--<Border Background="{StaticResource ComboBox.MouseOver.Background}">-->
                                <TextBlock Text="{Binding Path=Content,
                                                    RelativeSource={RelativeSource TemplatedParent}, 
                                                    Mode=TwoWay,
                                                    UpdateSourceTrigger=PropertyChanged}"
                                       TextAlignment="Center"
                                       VerticalAlignment="Center"
                                       Margin="5 0"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Border Background="{DynamicResource ComboBox.MouseOver.Background}"
                                    BorderBrush="Black"
                                    BorderThickness="1 0"
                                    Padding="0">
                                <!--<Border Background="{StaticResource ComboBox.MouseOver.Background}">-->
                                <TextBlock Text="{Binding Path=Content,
                                                    RelativeSource={RelativeSource TemplatedParent}, 
                                                    Mode=TwoWay,
                                                    UpdateSourceTrigger=PropertyChanged}"
                                       TextAlignment="Center"
                                       VerticalAlignment="Center"
                                       Margin="5 0"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="DarkGray"/>
                <Setter Property="Foreground" Value="LightGray"/>
            </Trigger>

        </Style.Triggers>
    </Style>

    

    <!--Base Button Style-->
    <Style x:Key="BaseButtonStyle"  TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultStyle}">
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="23"/>
        <Setter Property="Margin" Value="10 5"/>
        <Setter Property="Button.Effect">
            <Setter.Value>
                <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="5" Opacity="0.5" />
            </Setter.Value>
        </Setter>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <!--<Setter Property="Background" Value="Transparent"/>-->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="4" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="Black" 
                            BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="AliceBlue"/>
                <Setter Property="Foreground" Value="black"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="DarkGray"/>
                <Setter Property="Foreground" Value="LightGray"/>

            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--default button -->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Width" Value="125"/>
        <Setter Property="Height" Value="27"/>
    </Style>
    
    <!--default button large-->
    <Style x:Key="BaseButtonLarge" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Width" Value="125"/>
        <Setter Property="Height" Value="27"/>
    </Style>

    <!--default button small-->
    <Style x:Key="BaseButtonSmall" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="20"/>
    </Style>

    <!--Red Button Style-->
    <Style x:Key="RedButton"  TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Background" Value="#FFF7C1C1"/>
    </Style>

    <!--Green Button Style-->
    <Style x:Key="GreenButton"  TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Background" Value="#FA7FCA6B"/>
    </Style>

    <Style TargetType="DataGrid" x:Key="DataGridStyleBase" BasedOn="{StaticResource DefaultStyle}">
        <!--<Setter Property="Background" Value="DarkGray"/>
        <Setter Property="BorderBrush" Value="black" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="RowHeaderWidth" Value="20"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="SelectionUnit" Value="FullRow"/>
        <Setter Property="MinRowHeight" Value="18"/>
        <Setter Property="GridLinesVisibility" Value="All"/>
        <Setter Property="HorizontalGridLinesBrush" Value="LightGray" />
        <Setter Property="VerticalGridLinesBrush" Value="LightGray" />
        <Setter Property="RowHeight" Value="20"/>
        <Setter Property="CanUserResizeRows" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>-->
    </Style>

    
    <!--DataGrid Column Header Style-->
    <Style TargetType="DataGridColumnHeader"  x:Key="DataGridColumnHeaderBase">
        <!--<Setter Property="BorderThickness" Value="0 0 1 0" />
        <Setter Property="BorderBrush" Value="black" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="33"/>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="5 2 5 2"/>
        <Setter Property="FontWeight" Value="Normal"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeader">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="BackgroundBorder" BorderThickness="0,0,1,1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Black"
                                Grid.ColumnSpan="2"/>
                        <ContentPresenter Margin="3 0 3 2"
                                          VerticalAlignment="Center" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        <Path x:Name="SortArrow" Visibility="Collapsed" Data="M 0,0 L 1,0 0.5,1 z" Stretch="Fill"
                              Grid.Column="0"  Margin="0,1,0,0"
                              VerticalAlignment="Top" HorizontalAlignment="Center"
                              Width="8" Height="6" Fill="White"
                              RenderTransformOrigin="0.5, 0.4"
                              Opacity="0.5"/>

                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ThumbStyle}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" Grid.Column="1" HorizontalAlignment="Right" Style="{StaticResource ThumbStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="SortArrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="DisplayIndex" Value="0">
                            <Setter TargetName="PART_LeftHeaderGripper" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>



    <!--Column Header with Filter-->
    <Style TargetType="DataGridColumnHeader" x:Key="DataGridColumnHeaderWithFilterBase">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <!--<Setter Property="Foreground" Value="White" />-->
    </Style>

    <!--OCPD Column Header-->
    <Style TargetType="DataGridColumnHeader" 
           x:Key="OcpdColumnHeader">
        <!--<Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true" >
                <Setter Property="Background" Value="#FF268DEA"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <!--COMPONENT Column Header-->
    <Style TargetType="DataGridColumnHeader" 
           x:Key="ComponentColumnHeader">
        <!--<Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true" >
                <Setter Property="Background" Value="#FFCECEFF"/>
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <!--CABLE Column Header-->
    <Style TargetType="DataGridColumnHeader"
           x:Key="CableHeaderColumn">
        <!--<Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true" >
                <Setter Property="Background" Value="#FFCECEFF"/>
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <!--DataGrid Cell Style-->
    <Style TargetType="{x:Type DataGridCell}" x:Key="DataGridCellBase">
        <!--<Setter Property="FontSize" Value="11.5"/>
        <Setter Property="TextBlock.TextAlignment" Value="Center"/>
        <Setter Property="TextBlock.Padding" Value="10,10,10,10"/>
        <Setter Property="Padding" Value="50"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Padding="{TemplateBinding Padding}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#FFB7DEE8"/>
                <Setter Property="Foreground" Value="black"/>
                <Setter Property="FontWeight" Value="Regular"/>
                <Setter Property="BorderBrush" Value="Blue"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD6EDF3"/>
                <Setter Property="Foreground" Value="black"/>
                <Setter Property="FontWeight" Value="Regular"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="Blue"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>

</ResourceDictionary>