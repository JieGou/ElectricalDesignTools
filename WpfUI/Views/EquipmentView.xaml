<UserControl x:Class="WpfUI.Views.EquipmentView"
             x:Name="eqView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfUI.Views"
        xmlns:root="clr-namespace:WpfUI"
        xmlns:rules="clr-namespace:WpfUI.ValidationRules"
        xmlns:converters="clr-namespace:WpfUI.Converters"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:h="clr-namespace:WpfUI.Helpers"
        xmlns:commands="clr-namespace:WpfUI.Commands"
        xmlns:viewModifiers="clr-namespace:WpfUI.ViewModifiers"
        xmlns:views="clr-namespace:WpfUI.Views"
        xmlns:subViews="clr-namespace:WpfUI.Views.EquipmentSubViews"
        xmlns:viewComponents="clr-namespace:WpfUI.ViewComponents"
        xmlns:edt="clr-namespace:EDTLibrary;assembly=EDTLibrary"
        xmlns:edtDteqModels="clr-namespace:EDTLibrary.Models.DistributionEquipment;assembly=EDTLibrary"
        xmlns:edtLoadModels="clr-namespace:EDTLibrary.Models.Loads;assembly=EDTLibrary"
        mc:Ignorable="d"
        d:Width="1500" d:Height="1000"
        Background="#FFDAEEF1" PreviewKeyDown="eqView_PreviewKeyDown">

    <!--d:Opacity="1"
             Opacity="0.5">
    <UserControl.Triggers>
        <EventTrigger RoutedEvent="DataGrid.Loaded">
            <BeginStoryboard>
                <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="eqView"
                                Storyboard.TargetProperty="Opacity"
                                From="0.5" To="1" Duration="0:0:0.75"
                                AutoReverse="False" RepeatBehavior="1x"/>

                </Storyboard>
            </BeginStoryboard>
        </EventTrigger>
    </UserControl.Triggers>-->

    <UserControl.Resources>
        <!--Background="#FFBDCCCA">-->

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Styles/EdtStyle_Teal.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <converters:PercentLoadedToColorConverter x:Key="PercentLoadedToColor"/>
            <BooleanToVisibilityConverter x:Key="BoolToVisibility"/>

            <CollectionViewSource x:Key="dteqList" Source="{Binding ListManager.DteqList}"/>


            <Style x:Key="ColumnElementStyle" TargetType="TextBlock">
                <Setter Property="Margin" Value="10,0,10,0" />
            </Style>



            <sys:Int32 x:Key="dteqViewButtons">1</sys:Int32>
            <sys:Int32 x:Key="dteq">2</sys:Int32>
            <sys:Int32 x:Key="adding">3</sys:Int32>

            <sys:Int32 x:Key="loadViewButtons">4</sys:Int32>
            <sys:Int32 x:Key="load">5</sys:Int32>
            <sys:Int32 x:Key="bottom">6</sys:Int32>

            <!--ADD-->
            <sys:Int32 x:Key="Tag">1</sys:Int32>
            <sys:Int32 x:Key="Type">2</sys:Int32>
            <sys:Int32 x:Key="Description">3</sys:Int32>
            <sys:Int32 x:Key="Area">5</sys:Int32>
            <sys:Int32 x:Key="FedFrom">6</sys:Int32>
            <sys:Int32 x:Key="Size">7</sys:Int32>
            <sys:Int32 x:Key="Unit">8</sys:Int32>
            <sys:Int32 x:Key="Voltage">9</sys:Int32>
            <sys:Int32 x:Key="LoadFactor">10</sys:Int32>

        </ResourceDictionary>
    </UserControl.Resources>



    <!--TOP-->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Border BorderThickness="0 2 0 2" BorderBrush="Black">

            <StackPanel Orientation="Horizontal" 
                    Background="{StaticResource Darkest}">

                <Label Content="DISTRIBUTION EQUIPMENT AND LOADING"  Background="Transparent"
               Style="{StaticResource TitleLabelStyle}"
               BorderThickness="0"
               Margin="0 0 50 0"/>
                <!--<Button Content="Get All" Margin="0" Height="50" VerticalAlignment="Center"/>
                <Button Content="Save All" Margin="0" Height="50" VerticalAlignment="Center"/>
                <Button Content="Calculate All" Margin="0" Height="50" VerticalAlignment="Center"/>
                <Button Content="Auto-Size Cables" Margin="0" Height="50" VerticalAlignment="Center"/>
                <Button Content="Caluclate Cables" Margin="0" Height="50" VerticalAlignment="Center"/>
                <Button Content="Load List" Margin="0" Height="50" VerticalAlignment="Center"/>-->

            </StackPanel>
        </Border>

        <!--Main Grid-->
        <Grid Grid.Row="2"
              x:Name="eqGrid"
              d:Opacity="1"
              Opacity="0.0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="30"/>
                <ColumnDefinition Width="486*"/>
                <ColumnDefinition Width="1309*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="20"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="{Binding DteqGridBottom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" d:Height="400"/>
                <RowDefinition Height="{Binding LoadGridTop, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" d:Height="200"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.Triggers>
                <EventTrigger RoutedEvent="DataGrid.Loaded">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             Storyboard.TargetName="eqGrid"
                                             BeginTime="0:0:0"
                                From="0.0" To="1" Duration="0:0:0.5"
                                             AccelerationRatio="1"
                                AutoReverse="False" RepeatBehavior="1x"/>

                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Grid.Triggers>



            <!--Dteq View Buttons-->
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left"
                        Grid.Row="{StaticResource dteqViewButtons}" Grid.Column="3" Grid.ColumnSpan="2">

                <Button Content="Toggle Row View"
                        Command="{Binding Path=ToggleRowViewDteqCommand}"/>

                <Button Content="Loading Data"
                        Command="{Binding Path=ToggleLoadingViewDteqCommand}"/>

                <Button Content="OCDP Data"
                        Command="{Binding Path=ToggleOcpdViewDteqCommand}"/>

                <Button Content="Cable Data"
                        Command="{Binding Path=ToggleCableViewDteqCommand}"/>
            </StackPanel>

            <!--MENU BUTTONS-->
            <!--Dteq-->
            <StackPanel Orientation="Vertical" x:Name="dteqButtonsStackPanel"
                        Grid.Column="1" Grid.Row="{StaticResource dteq}"
                        Margin="0,50,0,0">

                <Button Name ="btnGetAll" Content="Get All" 
                        Command="{Binding GetAllCommand}"/>

                <Button Name ="btnSaveAll" Content="Save All"
                        Command="{Binding SaveAllCommand}"/>

                <Button Name ="btnSizeCables" Content="Size Cables"
                        Command="{Binding SizeCablesCommand}"/>

                <Button Name ="btnCalcCableAmps" Content="Cable Amps"
                        Command="{Binding CalculateAllCableAmpsCommand}"/>

                <Button Name ="btnDeleteDteq" Content="Delete Selected"
                        Style="{StaticResource RedButton}"
                        Command="{Binding DeleteDteqCommand}"
                        CommandParameter="{Binding SelectedDteq}" />
            </StackPanel>

            <!--ADD Buttons-->
            <StackPanel Orientation="Vertical"
                        Grid.Column="1" Grid.Row="{StaticResource adding}"
                        Margin="0,10,0,10">

                <Button Name ="btnAddDteq" Content="Add Dist. Eq." 
                        Command="{Binding Path=AddDteqCommand}"
                        CommandParameter="{Binding DteqToAddValidator}"
                        Margin="10,15,10,15" Background="#FF68BF51"/>

                <Button Name ="btnAddLoad" Content="Add Load" 
                        Command="{Binding Path=AddLoadCommand}"
                        CommandParameter="{Binding LoadToAddValidator}"
                        Margin="10,15,10,10" Background="#FF68BF51"/>

            </StackPanel>

            <!--Load-->

            <StackPanel Orientation="Vertical" 
                        x:Name="loadButtonsStackPanel"
                        Grid.Column="1" Grid.Row="4"
                        Margin="0,50,0,50">

                <Button x:Name ="btnLoadList" Content="Load List" Height="27" Width="125"
                        Command="{Binding ShowAllLoadsCommand}"/>

                <Button x:Name ="btnSaveLoadList" Content="Save Load List" Height="27" Width="125"
                        Command="{Binding SaveLoadListCommand}"/>

                <Button x:Name ="btnDeleteLoad" Content="Delete Load" Height="27" Width="125"
                        Style="{StaticResource RedButton}"
                        Command="{Binding DeleteLoadCommand}" 
                        CommandParameter="{Binding SelectedLoad}" />


                <Button Name ="btnCalculate" Content="Calculate All" 
                        Command="{Binding CalculateAllCommand}"
                        FontWeight="Bold"
                        Margin="0 50 0 0"/>

                <Button Name ="btnGrdSplitAdjust" Content="Fix View" 
                        FontWeight="Bold"
                        Margin="0 10 0 0" MouseLeftButtonDown="btnGrdSplitAdjust_MouseLeftButtonDown" MouseDown="btnGrdSplitAdjust_MouseDown" PreviewMouseLeftButtonDown="btnGrdSplitAdjust_PreviewMouseLeftButtonDown"/>
            </StackPanel>


            <!--Load VIEW Buttons-->

            <!--DTEQ-->
            <!--GRID-->
            <Grid Grid.Row="{StaticResource dteq}" Grid.Column="3" Grid.ColumnSpan="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding DteqGridRight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <!--<ColumnDefinition/>-->
                    <ColumnDefinition Width="10"/>
                    <ColumnDefinition Width="0.3*" MinWidth="475"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" x:Name="dteqGridRow"/>
                </Grid.RowDefinitions>

                <!--DETAILS VIEW-->
                <!--Dteq-->
                <TextBlock Grid.Row="0" Grid.Column="2" Text="Distribution Equipment Details" Margin="10"/>
                <Border Grid.Row="0" Grid.Column="2" BorderThickness="1" BorderBrush="Black" Background="LightCyan"
                        Margin="10 30 10 10">
                    <ContentControl x:Name="DteqDetailsContent" Grid.Row="{StaticResource dteq}" Grid.Column="4">
                    </ContentControl>
                </Border>

                <GridSplitter  Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Stretch"   
                               Width="5" Background="AliceBlue" BorderBrush="DarkGray" BorderThickness="0"
                               Margin="0 10 0 0"/>

                <!--DTEQ-->
                <!--DATA GRID-->
                <DataGrid x:Name="dgdDteq" 
                          Grid.Column="0" Grid.Row="0"
                          HorizontalAlignment="Left"
                          VerticalAlignment="Top"
                          d:Height="250"
                          Height="{Binding DteqGridHeight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          Margin="10"
                          ItemsSource="{Binding ListManager.IDteqList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          SelectedItem="{Binding SelectedDteq, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  
                          CanUserAddRows="False"
                          CanUserDeleteRows="False"
                          AutoGenerateColumns="False"
                          EnableRowVirtualization="True"
                          EnableColumnVirtualization="True"
                          ScrollViewer.CanContentScroll="True"
                          SelectionChanged="dgdDteq_SelectionChanged"
                          VirtualizingPanel.IsVirtualizing="True"
                          VirtualizingStackPanel.VirtualizationMode="Recycling"
                          RowDetailsVisibilityMode="{Binding ToggleRowViewDteqProp}" >


                    <!--<DataGrid.Triggers>
                        <EventTrigger RoutedEvent="DataGrid.Loaded">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="dgdDteq"
                                                     Storyboard.TargetProperty="Opacity"
                                                     From="0" To="1" Duration="0:0:0.05"
                                                     AutoReverse="False" RepeatBehavior="1x"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </DataGrid.Triggers>-->

                    <DataGrid.Resources>
                        <Style x:Key="errorStyle" TargetType="{x:Type TextBlock}">
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="ToolTipService.InitialShowDelay" Value="100"/>
                            <Style.Triggers>
                                <Trigger Property="Validation.HasError" Value="True">
                                    <Setter Property="Background" Value="Red"/>
                                    <Setter Property="Foreground" Value="Red"/>
                                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>

                        <viewModifiers:BindingProxy x:Key="LoadingViewProxy" Data="{Binding DteqGridViewModifier.Loading}" />
                        <viewModifiers:BindingProxy x:Key="OcpdViewProxy" Data="{Binding DteqGridViewModifier.Ocpd}" />
                        <viewModifiers:BindingProxy x:Key="CableViewProxy" Data="{Binding DteqGridViewModifier.Cable}" />
                    </DataGrid.Resources>

                    <DataGrid.Columns>
                        <!--Basic-->
                        <!--Textblock cell padding style in this.resources Move to ResDict-->

                        <!--Tag-->
                        <DataGridTextColumn Header="Tag" x:Name="dteqTag" 
                                        Width="75"
                                        Binding="{Binding Path=Tag, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=Explicit, ValidatesOnDataErrors=True}" 
                                        ElementStyle="{StaticResource ColumnElementStyle}" 
                                        Visibility="Visible"/>

                        <!--Description-->
                        <DataGridTextColumn Header="Description" x:Name="dteqDescription"
                                            MinWidth="150" 
                                            Binding="{Binding Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}">

                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="HorizontalAlignment" Value="Left" />
                                    <Setter Property="Margin" Value="5 0"/>
                                </Style>

                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>

                        <!--Area-->
                        <DataGridTemplateColumn Header="Area" x:Name="dteqArea"
                                    Width="75">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Area.Tag, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                               MouseLeftButtonDown="FastEditEvent" />

                                    <!-- CAUSES Disapearing when inside "Text" : UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True-->

                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                            <DataGridTemplateColumn.CellEditingTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding Path=DataContext.ListManager.AreaList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
                                                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}}"
                                              SelectedItem="{Binding Area, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                              DisplayMemberPath="Tag"
                                              Text="{Binding Area.Tag}"
                                              HorizontalContentAlignment="Left"
                                              IsEditable="False" IsTextSearchEnabled="True"
                                              IsSynchronizedWithCurrentItem="False"                                             
                                              BorderThickness="0"
                                              Template="{DynamicResource ComboBoxBase}"
                                              >
                                        <!--IsDropDownOpen="True"-->

                                        <ComboBox.ItemTemplate>
                                            <DataTemplate>
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="auto"/>
                                                        <ColumnDefinition Width="auto"/>
                                                    </Grid.ColumnDefinitions>
                                                    <TextBlock Grid.Column="0" Text="{Binding Tag}" HorizontalAlignment="Left" TextAlignment="Left" Width="35" Margin="10 0"/>
                                                    <TextBlock Grid.Column="1" Text="{Binding Name}" />
                                                </Grid>
                                            </DataTemplate>
                                        </ComboBox.ItemTemplate>
                                    </ComboBox>

                                </DataTemplate>
                            </DataGridTemplateColumn.CellEditingTemplate>
                        </DataGridTemplateColumn>



                        <!--Fed From Model-->
                        <DataGridTemplateColumn Header=" Fed&#x0a;From" x:Name="dteqFedFrom" MinWidth="75">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding FedFrom.Tag, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                               MouseLeftButtonDown="FastEditEvent"/>

                                    <!-- CAUSES Disapearing when inside "Text" : UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True-->

                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                            <DataGridTemplateColumn.CellEditingTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}},Path=DataContext.ListManager.DteqList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                              SelectedItem="{Binding FedFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                              DisplayMemberPath="Tag"
                                              HorizontalContentAlignment="Center"
                                              IsEditable="False" IsTextSearchEnabled="False" IsReadOnly="True" TextSearch.Text=""
                                              IsSynchronizedWithCurrentItem="False"
                                              BorderThickness="0"
                                              Template="{DynamicResource ComboBoxBase}"
                                              />
                                    <!--IsDropDownOpen="True"-->
                                </DataTemplate>
                            </DataGridTemplateColumn.CellEditingTemplate>
                        </DataGridTemplateColumn>


                        <!--Line Voltage-->
                        <DataGridTemplateColumn  Header="   Line &#x0a;Voltage" x:Name="dteqLineVoltage">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding LineVoltage,  StringFormat={}{0:N0}, ValidatesOnDataErrors=True}"
                                               MouseLeftButtonDown="FastEditEvent"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>

                            <DataGridTemplateColumn.CellEditingTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}},Path=DataContext.VoltageTypes}"
                                              SelectedValue="{Binding Path=LineVoltage, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                              Text="{Binding LineVoltage}"
                                              HorizontalContentAlignment="Center"
                                              IsEditable="False" IsTextSearchEnabled="True"
                                              IsSynchronizedWithCurrentItem="False"
                                              BorderThickness="0"
                                              Template="{DynamicResource ComboBoxBase}"
                                              
                                              />
                                    <!--IsDropDownOpen="True"-->
                                </DataTemplate>
                            </DataGridTemplateColumn.CellEditingTemplate>
                        </DataGridTemplateColumn>

                        <!--Load Voltage-->
                        <DataGridTemplateColumn Header="  Load &#x0a;Voltage" x:Name="dteqLoadVoltage">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding LoadVoltage,  StringFormat={}{0:N0}, ValidatesOnDataErrors=True}"
                                               MouseLeftButtonDown="FastEditEvent"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>

                            <DataGridTemplateColumn.CellEditingTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}},Path=DataContext.VoltageTypes}"
                                              SelectedValue="{Binding Path=LoadVoltage, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                              Text="{Binding LoadVoltage}"
                                              HorizontalContentAlignment="Center"
                                              IsEditable="False" IsTextSearchEnabled="True"
                                              IsSynchronizedWithCurrentItem="False"
                                              BorderThickness="0"
                                              Template="{DynamicResource ComboBoxBase}"
                                              />
                                    <!--IsDropDownOpen="True"-->
                                </DataTemplate>
                            </DataGridTemplateColumn.CellEditingTemplate>
                        </DataGridTemplateColumn>

                        <!--Size-->
                        <DataGridTextColumn Header="Size" x:Name="dteqSize"
                                MinWidth="50"
                                Binding="{Binding Path=Size,  StringFormat={}{0:N0}, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="HorizontalAlignment" Value="Right" />
                                    <Setter Property="Margin" Value="5 0"/>
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>

                        <!--Unit-->
                        <DataGridTextColumn Header="Unit"
                                            MinWidth="40"
                                            IsReadOnly="True"
                                            TextBlock.TextAlignment="Left"
                                            Binding="{Binding Unit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="HorizontalAlignment" Value="Left" />
                                    <Setter Property="Margin" Value="5 0"/>
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>

                        <!--Type-->
                        <DataGridTextColumn Header="EQ Type" x:Name="dteqType"
                                            MinWidth="75"
                                            Binding="{Binding Type, ValidatesOnDataErrors=True}"
                                            IsReadOnly="True">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="HorizontalAlignment" Value="Left" />
                                    <Setter Property="Margin" Value="5 0"/>
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>

                        <!--LOADING-->
                        <!--Percent Loaded-->
                        <DataGridTemplateColumn Header="Percent &#x0a;Loaded"
                                x:Name="dteqPercentLoaded"
                                MinWidth="35"
                                MaxWidth="55"
                                IsReadOnly="True">

                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                        <TextBlock Text="{Binding PercentLoaded, StringFormat={}{0:N0}  %, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                                   Background="{Binding PercentLoaded, Converter={StaticResource PercentLoadedToColor}}"
                                                   Height="20" Width="75"
                                                   HorizontalAlignment="Center"
                                                   VerticalAlignment="Stretch"
                                                   TextAlignment="Center"
                                                   Margin="0"
                                                   Padding="0 2 0 0"/>
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <!--Running Amps-->
                        <DataGridTextColumn Header="Running &#x0a;  Amps" x:Name="dteqRunningAmps"
                                Binding="{Binding Path=RunningAmps,  StringFormat={}{0:N0}, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                IsReadOnly="True"/>

                        <!--FLA-->
                        <DataGridTextColumn Header="FLA / Max&#x0a;    Amps" x:Name="dteqFla" 
                                MinWidth="40"
                                Binding="{Binding Path=Fla,  StringFormat={}{0:N0}, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                IsReadOnly="True"/>

                        <!--Power Factor-->
                        <DataGridTextColumn Header=" PF " x:Name="dteqPowerFactor" 
                                        Width="40"
                                        Binding="{Binding Path=PowerFactor, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                        IsReadOnly="True"
                                        Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource LoadingViewProxy}}"/>

                        <DataGridTextColumn Header="Conn &#x0a; kVA" x:Name="dteqConnectedKva"
                                Binding="{Binding Path=ConnectedKva,  StringFormat={}{0:N0}, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                IsReadOnly="True"
                                Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource LoadingViewProxy}}"/>

                        <DataGridTextColumn Header="Dem &#x0a; kVA" x:Name="dteqDemandKva"
                                Binding="{Binding Path=DemandKva,  StringFormat={}{0:N0}, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                IsReadOnly="True"
                                Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource LoadingViewProxy}}"/>

                        <DataGridTextColumn Header="Dem &#x0a; kW" x:Name="dteqDemandKw" 
                                Binding="{Binding Path=DemandKw,  StringFormat={}{0:N0}, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                IsReadOnly="True"
                                Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource LoadingViewProxy}}"/>

                        <DataGridTextColumn Header="Dem &#x0a;kVAR" x:Name="dteqDemandKvar" 
                                Binding="{Binding Path=DemandKvar,  StringFormat={}{0:N0}, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                IsReadOnly="True"
                                Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource LoadingViewProxy}}"/>

                        <!--OCPD-->
                        <DataGridTextColumn Header="OCPD &#x0a;  Type" x:Name="dteqPdType" 
                                Binding="{Binding Path=PdType, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource OcpdColumnHeader}" 
                                Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource OcpdViewProxy}}"/>

                        <DataGridTextColumn Header="OCPD &#x0a;  Trip" x:Name="dteqPdSizeTrip" 
                                Binding="{Binding Path=PdSizeTrip, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource OcpdColumnHeader}" 
                                Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource OcpdViewProxy}}"/>

                        <DataGridTextColumn Header="OCPD &#x0a;Frame" x:Name="dteqPdSizeFrame" 
                                Binding="{Binding Path=PdSizeFrame, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource OcpdColumnHeader}" 
                                Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource OcpdViewProxy}}"/>


                        <!--CABLE-->
                        <DataGridTextColumn Header="Cable &#x0a;  Qty" x:Name="dteqCableQty"
                                Binding="{Binding Path=PowerCable.QtyParallel, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource CableHeaderColumn}" 
                                        Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource CableViewProxy}}"/>

                        <DataGridTextColumn Header="Cable &#x0a; Size" x:Name="dteqCableSize" 
                                Binding="{Binding Path=PowerCable.Size, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource CableHeaderColumn}" 
                                        Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource CableViewProxy}}"/>

                        <DataGridTextColumn Header=" Base &#x0a;Amps" x:Name="dteqCableBaseAmps" 
                                Binding="{Binding Path=PowerCable.BaseAmps, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource CableHeaderColumn}" 
                                        Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource CableViewProxy}}"/>

                        <!--<DataGridTextColumn Header="   Req'd&#x0a;Sz. Amps" x:Name="dteqCableRequiredSizingAmps" 
                                Binding="{Binding Path=PowerCable.RequiredSizingAmps, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource CableHeaderColumn}" 
                                        Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource CableViewProxy}}"/>-->


                        <DataGridTextColumn Header="  Cable&#x0a;Derating" x:Name="dteqCableDerating" 
                                Binding="{Binding Path=PowerCable.Derating, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource CableHeaderColumn}" 
                                        Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource CableViewProxy}}"/>

                        <DataGridTextColumn Header="Derated &#x0a;  Amps" x:Name="dteqCableDeratedAmps" 
                                Binding="{Binding Path=PowerCable.DeratedAmps, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource CableHeaderColumn}" 
                                        Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource CableViewProxy}}"/>

                        <DataGridTextColumn Header="Req'd&#x0a;Amps" x:Name="dteqCableRequiredAmps" 
                                Binding="{Binding Path=PowerCable.RequiredAmps, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource CableHeaderColumn}" 
                                        Visibility="{Binding Data, Converter={StaticResource BoolToVisibility}, Source={StaticResource CableViewProxy}}"/>
                    </DataGrid.Columns>

                    <DataGrid.RowDetailsTemplate>
                        <DataTemplate>
                            <Border BorderThickness="0" Background="Beige" Padding="10">
                                <Grid Margin="5,0,0,0" MinWidth="650" HorizontalAlignment="Left">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto"></ColumnDefinition>
                                        <ColumnDefinition Width="*"></ColumnDefinition>
                                        <ColumnDefinition Width="125"></ColumnDefinition>
                                        <ColumnDefinition Width="*"></ColumnDefinition>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"></RowDefinition>
                                        <RowDefinition Height="Auto"></RowDefinition>
                                        <RowDefinition Height="Auto"></RowDefinition>
                                        <RowDefinition Height="Auto"></RowDefinition>
                                    </Grid.RowDefinitions>

                                </Grid>
                            </Border>
                        </DataTemplate>
                    </DataGrid.RowDetailsTemplate>

                    <DataGrid.RowValidationRules>
                        <rules:InvalidFedFromRule ValidatesOnTargetUpdated="True" ValidationStep="CommittedValue"/>
                    </DataGrid.RowValidationRules>

                    <DataGrid.RowValidationErrorTemplate>
                        <ControlTemplate>
                            <Grid Margin="5,2,0,0"
                                ToolTip="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridRow}}, Path=(Validation.Errors)[0].ErrorContent}"
                                ToolTipService.InitialShowDelay="50">

                                <!--<Ellipse StrokeThickness="0" Fill="Red" 
                                Width="{TemplateBinding FontSize}" 
                                Height="{TemplateBinding FontSize}" />-->
                                <TextBlock Text="X" FontSize="15" 
                                    FontWeight="UltraBold" Foreground="Red" 
                                    HorizontalAlignment="Stretch"  />
                            </Grid>
                        </ControlTemplate>
                    </DataGrid.RowValidationErrorTemplate>
                </DataGrid>
            </Grid>



            <!--ADD EQUIPMENT-->
            <Grid Grid.Row="{StaticResource adding}"  Grid.Column="3" 
            Grid.ColumnSpan="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="10"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="1"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="15"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>


                <!--ADD DTEQ-->
                <!--Tags-->
                <TextBlock Text="Tag" Margin="10 5 0 5"
                    Grid.Row="1" Grid.Column="{StaticResource Tag}" FontSize="10" />
                <TextBlock Text="Type" Margin="10 5 0 5"
                    Grid.Row="1" Grid.Column="{StaticResource Type}" FontSize="10" />

                <TextBlock Text="Description" Margin="10 5 0 5"
                    Grid.Row="1" Grid.Column="{StaticResource Description}" FontSize="10" />

                <TextBlock Text="Area" Margin="10 5 0 5"
                    Grid.Row="1" Grid.Column="{StaticResource Area}" FontSize="10" />

                <TextBlock Text="Fed From" Margin="10 5 0 5"
                    Grid.Row="1" Grid.Column="{StaticResource FedFrom}" FontSize="10" />
                <TextBlock Text="Line Voltage" Margin="10 5 0 5"
                    Grid.Row="1" Grid.Column="{StaticResource Voltage}" FontSize="10" />
                <TextBlock Text="Size" Margin="10 5 0 5"
                    Grid.Row="1" Grid.Column="{StaticResource Size}" FontSize="10" />
                <TextBlock Text="Unit" Margin="10 5 0 5"
                    Grid.Row="1" Grid.Column="{StaticResource Unit}" FontSize="10" />



                <!--ADD DTEQ-->
                <!--Text/Combo Boxes-->
                <TextBox x:Name ="txtDteqTag"  
                    Grid.Row="2" Grid.Column="{StaticResource Tag}"
                    Width="75" Height="23"
                    Text="{Binding DteqToAddValidator.Tag, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    PreviewMouseDown="txtDteqTag_PreviewMouseDown" LostFocus="txtDteqTag_LostFocus"
                    Margin="5 0 5 0"/>

                <ComboBox Grid.Row="2" Grid.Column="{StaticResource Type}"
                          Template="{DynamicResource ComboBoxBase}"
                    d:Text="MCC"
                    ItemsSource="{Binding Source={h:EnumBindingSource {x:Type edt:DteqTypes}}}"
                    SelectedValue="{Binding DteqToAdd.Type, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=False}"
                    Text="{Binding DteqToAddValidator.Type}"                       
                    IsEditable="False" IsTextSearchEnabled="True"
                    Margin="5 0 5 0"/>


                <TextBox Grid.Row="2" Grid.Column="{StaticResource Description}"
                    MinWidth="100" Height="23"
                    Text="{Binding DteqToAddValidator.Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Margin="5 0 5 0">

                </TextBox>

                <ComboBox Grid.Row="2" Grid.Column="{StaticResource Area}"
                          Template="{DynamicResource ComboBoxBase}"
                          Width="75"
                          ItemsSource="{Binding ListManager.AreaList}"
                          SelectedValuePath="Tag"
                          DisplayMemberPath="Tag"
                          SelectedValue="{Binding DteqToAddValidator.AreaTag, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=False}"
                          IsSynchronizedWithCurrentItem="False"
                          Text="{Binding DteqToAddValidator.AreaTag}"
                          IsEditable="False" IsTextSearchEnabled="True"
                          Margin="5 0 5 0"/>

                <ComboBox Grid.Row="2" Grid.Column="{StaticResource FedFrom}"
                          Template="{DynamicResource ComboBoxBase}"
                          
                          Width="75"
                          ItemsSource="{Binding Source={StaticResource dteqList}}"
                          SelectedItem="{Binding DteqToAddValidator.FedFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=False}"
                          DisplayMemberPath="Tag"
                          IsSynchronizedWithCurrentItem="False"
                          Text="{Binding DteqToAddValidator.FedFromTag}"
                          IsEditable="False" IsTextSearchEnabled="True"
                          Margin="5 0 5 0"/>



                <TextBox Grid.Row="2" Grid.Column="{StaticResource Size}"
                    Width="50" Height="23"
                    d:Text="10000"
                    Text="{Binding DteqToAddValidator.Size, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Margin="5 0 5 0">

                </TextBox>

                <ComboBox Grid.Row="2" Grid.Column="{StaticResource Unit}"
                          Template="{DynamicResource ComboBoxBase}"
                    Width="50"
                    ItemsSource="{Binding Source={h:EnumBindingSource {x:Type edt:Units}}}"
                    SelectedValue="{Binding DteqToAddValidator.Unit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=False}"
                    Text="{Binding DteqToAddValidator.Unit}"
                    IsEditable="False" IsTextSearchEnabled="True"
                    Margin="5 0 5 0">

                </ComboBox>

                <ComboBox Grid.Row="2" Grid.Column="{StaticResource Voltage}"
                    Width="60"
                    d:Text="13800"
                    ItemsSource="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}},Path=DataContext.VoltageTypes, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    SelectedValue="{Binding DteqToAddValidator.LineVoltage, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=False}"
                    Text="{Binding DteqToAddValidator.LineVoltage}"
                    IsEditable="True" IsTextSearchEnabled="True"
                    Margin="5 0 5 0"/>

                <!--ADD LOAD-->
                <!--
                <StackPanel Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="10">
                    <Expander x:Name="ExportExpander" 
                              Header="Add Load" ExpandDirection="Right">

                        <subViews:AddLoadView Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="11"
                                      DataContext="{Binding}"/>
                    </Expander>
                </StackPanel>-->

                <!--Tags-->
                <TextBlock Text="Tag" Margin="10 5 0 5"
                    Grid.Row="4" Grid.Column="{StaticResource Tag}" FontSize="10" />
                <TextBlock Text="Type" Margin="10 5 0 5"
                    Grid.Row="4" Grid.Column="{StaticResource Type}" FontSize="10" />

                <TextBlock Text="Description" Margin="10 5 0 5"
                    Grid.Row="4" Grid.Column="{StaticResource Description}" FontSize="10" />

                <TextBlock Text="Area" Margin="10 5 0 5"
                    Grid.Row="4" Grid.Column="{StaticResource Area}" FontSize="10" />
                <TextBlock Text="Fed From" Margin="10 5 0 5"
                    Grid.Row="4" Grid.Column="{StaticResource FedFrom}" FontSize="10" />

                <TextBlock Text="Size" Margin="10 5 0 5"
                    Grid.Row="4" Grid.Column="{StaticResource Size}" FontSize="10" />
                <TextBlock Text="Unit" Margin="10 5 0 5"
                    Grid.Row="4" Grid.Column="{StaticResource Unit}" FontSize="10" />
                <TextBlock Text="L.F." Margin="10 5 0 5"
                    Grid.Row="4" Grid.Column="{StaticResource LoadFactor}" FontSize="10" />
                <TextBlock Text="Voltage" Margin="10 5 0 5"
                    Grid.Row="4" Grid.Column="{StaticResource Voltage}" FontSize="10" />

                <!--ADD LOAD-->
                <!--Text/Combo Boxes-->
                <TextBox x:Name ="txtLoadTag"  
                    Grid.Row="5" Grid.Column="{StaticResource Tag}"
                    Width="75" Height="23"
                    Text="{Binding LoadToAddValidator.Tag, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    PreviewMouseDown="txtLoadTag_PreviewMouseDown" LostFocus="txtLoadTag_LostFocus"
                    Margin="5,0,5,0" VerticalAlignment="Bottom">
                </TextBox>

                <ComboBox Grid.Row="5" Grid.Column="{StaticResource Type}" 
                          Template="{DynamicResource ComboBoxBase}"
                            d:Text="MOTOR"
                            MinWidth="100"
                            ItemsSource="{Binding Source={h:EnumBindingSource {x:Type edt:LoadTypes}}}"
                            SelectedValue="{Binding LoadToAddValidator.Type, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=False}"
                            Text="{Binding LoadToAddValidator.Type}"
                            IsEditable="False" IsTextSearchEnabled="True"  
                            Margin="5 0 5 0"/>

                <TextBox Grid.Row="5" Grid.Column="{StaticResource Description}"
                    MinWidth="100" Height="23"
                    Text="{Binding LoadToAddValidator.Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Margin="5 0 5 0">
                </TextBox>

                <ComboBox Grid.Row="5" Grid.Column="{StaticResource Area}" 
                          Template="{DynamicResource ComboBoxBase}"
                          
                          Width="75"
                          ItemsSource="{Binding ListManager.AreaList}"
                          SelectedValuePath="Tag"
                          DisplayMemberPath="Tag"
                          SelectedValue="{Binding LoadToAddValidator.AreaTag, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=False}"
                          IsSynchronizedWithCurrentItem="False"
                          Text="{Binding LoadToAddValidator.AreaTag}"
                          IsEditable="False" IsTextSearchEnabled="True"  
                          Margin="5 0 5 0"/>

                <!--Fed From-->
                <ComboBox Grid.Row="5" Grid.Column="{StaticResource FedFrom}" 
                          Template="{DynamicResource ComboBoxBase}"
                          
                          Width="75"
                          ItemsSource="{Binding Source={StaticResource dteqList}}"
                          SelectedValuePath="Tag"
                          DisplayMemberPath="Tag"
                          SelectedValue="{Binding LoadToAddValidator.FedFromTag, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=False}"
                          IsSynchronizedWithCurrentItem="False"
                          Text="{Binding LoadToAddValidator.FedFromTag}"
                          IsEditable="False" IsTextSearchEnabled="True"  
                          Margin="5 0 5 0"/>




                <TextBox Grid.Row="5" Grid.Column="{StaticResource Size}"
                    Width="50" Height="23"
                    Text="{Binding LoadToAddValidator.Size, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Margin="5 0 5 0">

                </TextBox>

                <ComboBox Grid.Row="5" Grid.Column="{StaticResource Unit}"
                          Template="{DynamicResource ComboBoxBase}"
                            Width="50"
                            ItemsSource="{Binding Source={h:EnumBindingSource {x:Type edt:Units}}}"
                            SelectedValue="{Binding LoadToAddValidator.Unit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=False}"
                            Text="{Binding LoadToAddValidator.Unit}"
                            IsEditable="False" IsTextSearchEnabled="True"
                            Margin="5 0 5 0"/>

                <ComboBox Grid.Row="5" Grid.Column="{StaticResource Voltage}"
                    MinWidth="60"
                    d:Text="13800"
                    ItemsSource="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}},Path=DataContext.VoltageTypes, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    SelectedValue="{Binding LoadToAddValidator.Voltage, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=False}"
                    Text="{Binding LoadToAddValidator.Voltage}"
                    IsEditable="True" IsTextSearchEnabled="True"
                    Margin="5 0 5 0"/>

                <TextBox Grid.Row="5" Grid.Column="{StaticResource LoadFactor}"
                    MinWidth="50" Height="23"
                    Text="{Binding LoadToAddValidator.LoadFactor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Margin="5 0 5 0">
                </TextBox>
            </Grid>


            <!--LOADS-->
            <!--Grid-->
            <!--<Grid Grid.Row="{StaticResource load}" Grid.Column="3">-->
            <Grid Grid.Row="4" Grid.Column="3" Grid.ColumnSpan="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding LoadGridRight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <!--<ColumnDefinition/>-->
                    <ColumnDefinition Width="10"/>
                    <ColumnDefinition Width="0.35*" MinWidth="475"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>



                <!--LOAD-->
                <!--DETAILS VIEW-->
                <TextBlock Grid.Row="0" Grid.Column="2" Text="Load Details" Margin="10"/>
                <Border Grid.Row="0" Grid.Column="2" BorderThickness="1" BorderBrush="Black" Background="LightCyan"
                        Margin="10 30 10 10">

                    <ContentControl x:Name="LoadDetailsContent" Grid.Row="{StaticResource load}" Grid.Column="4">

                    </ContentControl>
                </Border>

                <GridSplitter  Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Stretch"   
                               Width="5" Background="AliceBlue" BorderBrush="DarkGray" BorderThickness="0"
                               Margin="0 0 0 10"/>
                <!--LOAD-->
                <!--DATA GRID-->
                <DataGrid x:Name="dgdAssignedLoads" 
                          Grid.Row="0"  Grid.Column="0"
                          HorizontalAlignment="Left" VerticalAlignment="Stretch" 
                          d:Height="250"
                          Height="{Binding LoadGridHeight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          Margin="10,10,10,5"
                          ItemsSource="{Binding Path=AssignedLoads, Mode=OneWay, UpdateSourceTrigger=PropertyChanged,IsAsync=True}"
                          SelectedItem="{Binding SelectedLoad, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          CanUserAddRows="False"
                          CanUserDeleteRows="False"
                          AutoGenerateColumns="False"
                          EnableRowVirtualization="False"
                          EnableColumnVirtualization="False"
                          ScrollViewer.CanContentScroll="False"
                          VirtualizingPanel.IsVirtualizing="False"
                          VirtualizingStackPanel.VirtualizationMode="Recycling"
                          RowDetailsVisibilityMode="{Binding ToggleRowViewProp}"
                          SelectionChanged="dgdAssignedLoads_SelectionChanged" PreviewKeyDown="dgdAssignedLoads_PreviewKeyDown"
                          >

                    <DataGrid.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Set FedFrom" PreviewMouseDown="LoadGridContextMenu_SetFedFrom" Height="20"/>
                            <MenuItem Header="Delete" Height="20" PreviewMouseDown="LoadGridContextMenu_Delete"/>
                        </ContextMenu>
                    </DataGrid.ContextMenu>

                    <DataGrid.Columns>
                        <!--Textblock cell padding style in this.resources Move to ResDict-->

                        <!--Tag-->
                        <DataGridTextColumn Header="Tag"
                                        Width="75"
                                        Binding="{Binding Path=Tag, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                        ElementStyle="{StaticResource ColumnElementStyle}" 
                                        />

                        <!--<DataGridTemplateColumn Header="Tag"
                                    MinWidth="40">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <TextBox Text="{Binding Tag, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                        BorderThickness="0"
                                        HorizontalAlignment="Center"
                                        Margin="0"/>
                        </StackPanel>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>-->

                        <!--Description-->
                        <DataGridTextColumn Header="Description" 
                                MinWidth="150" 
                                Binding="{Binding Path=Description, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="HorizontalAlignment" Value="Left" />
                                    <Setter Property="Margin" Value="5 0"/>
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>

                        <!--Area-->
                        <DataGridTemplateColumn Header="Area" x:Name="loadArea"
                                    MinWidth="75">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Area.Tag, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                               MouseLeftButtonDown="FastEditEvent" />

                                    <!-- CAUSES Disapearing when inside "Text" : UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True-->

                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                            <DataGridTemplateColumn.CellEditingTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding Path=DataContext.ListManager.AreaList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
                                                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}}"
                                              SelectedItem="{Binding Area, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                              DisplayMemberPath="Tag"
                                              Text="{Binding Area.Tag}"
                                              HorizontalContentAlignment="Center"
                                              IsEditable="False" IsTextSearchEnabled="True"
                                              IsSynchronizedWithCurrentItem="False"
                                              BorderThickness="0"
                                              Template="{DynamicResource ComboBoxBase}"
                                              />
                                    <!--IsDropDownOpen="True"-->
                                </DataTemplate>
                            </DataGridTemplateColumn.CellEditingTemplate>
                        </DataGridTemplateColumn>





                        <!--Fed From Model-->
                        <DataGridTemplateColumn Header=" Fed&#x0a;From" x:Name="loadFedFrom" MinWidth="75"
                                                CanUserSort="True"
                                                CanUserReorder="True"
                                                SortMemberPath="FedFrom.Tag">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding FedFrom.Tag, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                               MouseLeftButtonDown="FastEditEvent" />

                                    <!-- CAUSES Disapearing when inside "Text" : UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True-->

                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                            <DataGridTemplateColumn.CellEditingTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}},Path=DataContext.ListManager.DteqList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                              SelectedItem="{Binding Path=FedFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                              DisplayMemberPath="Tag"
                                              HorizontalContentAlignment="Center"
                                              IsEditable="False" IsTextSearchEnabled="False" IsReadOnly="True" TextSearch.Text=""
                                              IsSynchronizedWithCurrentItem="False"
                                              BorderThickness="0" 
                                              Template="{DynamicResource ComboBoxBase}"
                                              
                                              />
                                    <!--IsDropDownOpen="True"-->
                                </DataTemplate>
                            </DataGridTemplateColumn.CellEditingTemplate>
                        </DataGridTemplateColumn>

                        <!--Voltage-->
                        <DataGridTemplateColumn Header="Voltage">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Voltage, ValidatesOnDataErrors=True}"
                                               MouseLeftButtonDown="FastEditEvent"
                                              />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>

                            <DataGridTemplateColumn.CellEditingTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}},Path=DataContext.VoltageTypes, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                              SelectedValue="{Binding Voltage, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                              Text="{Binding Voltage, ValidatesOnDataErrors=True}"
                                              HorizontalContentAlignment="Center"
                                              IsEditable="False" IsTextSearchEnabled="True"
                                              IsSynchronizedWithCurrentItem="False"
                                              BorderThickness="0"
                                              Width="50"
                                              Template="{DynamicResource ComboBoxBase}"
                                              
                                              />
                                    <!--IsDropDownOpen="True"-->
                                </DataTemplate>
                            </DataGridTemplateColumn.CellEditingTemplate>
                        </DataGridTemplateColumn>

                        <!--Size-->
                        <DataGridTextColumn Header="Size" x:Name="loadSize"
                                MinWidth="50"
                                Width="50"
                                Binding="{Binding Path=Size, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=Explicit, ValidatesOnDataErrors=True}" 
                                            >
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="HorizontalAlignment" Value="Right" />
                                    <Setter Property="Margin" Value="5 0"/>
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>

                        <!--Unit-->
                        <DataGridTextColumn Header="Unit"
                                            MinWidth="40"
                                            Binding="{Binding Unit, ValidatesOnDataErrors=True}"
                                            IsReadOnly="True">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="HorizontalAlignment" Value="Left" />
                                    <Setter Property="Margin" Value="5 0"/>
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>

                        <!--Type-->
                        <DataGridTextColumn Header="EQ Type" x:Name="loadType"
                                            MinWidth="75"
                                            Binding="{Binding Type, ValidatesOnDataErrors=True}"
                                            IsReadOnly="True">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="HorizontalAlignment" Value="Left" />
                                    <Setter Property="Margin" Value="5 0"/>
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>

                        <!--LOADING-->
                        <DataGridTextColumn Header="FLA"
                                MinWidth="40"
                                Width="40"
                                Binding="{Binding Path=Fla, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                IsReadOnly="True"/>

                        <!--Efficiency-->
                        <DataGridTemplateColumn Header="Eff"
                                    MinWidth="40"
                                    Width="40"
                                                IsReadOnly="True">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                        <TextBlock Text="{Binding Path=Efficiency, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                                   HorizontalAlignment="Center"
                                                   Margin="0"/>
                                        <TextBlock Text=" %"
                                                   HorizontalAlignment="Center"/>
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                            <DataGridTemplateColumn.CellEditingTemplate>
                                <DataTemplate>
                                    <TextBox Text="{Binding Path=Efficiency, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                    BorderThickness="0"
                                    Margin="0"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellEditingTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTextColumn Header=" PF " 
                                MinWidth="40"
                                Width="40"
                                Binding="{Binding Path=PowerFactor, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                            IsReadOnly="True"/>

                        <!--Running Amps-->
                        <DataGridTextColumn Header="Running &#x0a;Amps"
                                Width="40"
                                Visibility="Hidden"
                                IsReadOnly="True"
                                Binding="{Binding Path=RunningAmps, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>

                        <DataGridTextColumn Header="Conn &#x0a; kVA"
                                Width="40"
                                IsReadOnly="True"
                                Visibility="{Binding ToggleLoadingViewLoadProp}"
                                Binding="{Binding Path=ConnectedKva, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>

                        <DataGridTextColumn Header="Dem &#x0a; kVA"  
                                Width="40"
                                IsReadOnly="True"
                                Visibility="{Binding ToggleLoadingViewLoadProp}"
                                Binding="{Binding Path=DemandKva, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>

                        <DataGridTextColumn Header="Dem &#x0a; kW" 
                                Width="40"
                                IsReadOnly="True"
                                Visibility="{Binding ToggleLoadingViewLoadProp}"
                                Binding="{Binding Path=DemandKw, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>

                        <DataGridTextColumn Header="Dem &#x0a;kVAR" 
                                Width="40"
                                IsReadOnly="True"
                                Visibility="{Binding ToggleLoadingViewLoadProp}"
                                Binding="{Binding Path=DemandKvar, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>

                        <!--OCPD-->
                        <DataGridTextColumn Header="OCPD &#x0a; Type" 
                                Width="45"
                                Visibility="{Binding ToggleOcpdViewLoadProp}"
                                Binding="{Binding Path=PdType, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource OcpdColumnHeader}" />

                        <DataGridTextColumn Header="OCPD &#x0a;  Trip" 
                                Width="45"
                                
                                Visibility="{Binding ToggleOcpdViewLoadProp}"
                                Binding="{Binding Path=PdSizeTrip, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource OcpdColumnHeader}" />

                        <DataGridTextColumn Header="OCPD &#x0a;Frame" 
                                Width="45"
                                Visibility="{Binding ToggleOcpdViewLoadProp}"
                                Binding="{Binding Path=PdSizeFrame, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource OcpdColumnHeader}" />


                        <!--CABLE-->
                        <DataGridTextColumn Header="Cable &#x0a;  Qty" x:Name="loadCableQty" 
                                Width="50"
                                Visibility="{Binding ToggleCableViewLoadProp}"
                                Binding="{Binding Path=PowerCable.QtyParallel, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource CableHeaderColumn}" />

                        <DataGridTextColumn Header="Cable &#x0a; Size" x:Name="loadCableSize" 
                                Width="50"
                                Visibility="{Binding ToggleCableViewLoadProp}"
                                Binding="{Binding Path=PowerCable.Size, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource CableHeaderColumn}" />

                        <DataGridTextColumn Header=" Base &#x0a;Amps" x:Name="loadCableBaseAmps" 
                                Width="50"
                                Visibility="{Binding ToggleCableViewLoadProp}"
                                Binding="{Binding Path=PowerCable.BaseAmps, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource CableHeaderColumn}" />


                        <DataGridTextColumn Header="  Cable&#x0a;Derating" x:Name="loadCableDerating" 
                                Width="60"
                                Visibility="{Binding ToggleCableViewLoadProp}"
                                Binding="{Binding Path=PowerCable.Derating, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource CableHeaderColumn}" />

                        <DataGridTextColumn Header="Derated &#x0a;  Amps" x:Name="loadCableDeratedAmps" 
                                Width="60"
                                Visibility="{Binding ToggleCableViewLoadProp}"
                                Binding="{Binding Path=PowerCable.DeratedAmps, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource CableHeaderColumn}" />

                        <DataGridTextColumn Header="Req'd&#x0a;Amps" x:Name="loadCableRequiredAmps" 
                                Width="50"
                                Visibility="{Binding ToggleCableViewLoadProp}"
                                Binding="{Binding Path=PowerCable.RequiredAmps, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                HeaderStyle="{StaticResource CableHeaderColumn}" />

                    </DataGrid.Columns>
                </DataGrid>

                <!--***********************************-->
                <!--******   BOTTOM STATUS BAR   ******-->
                <!--***********************************-->

                <StackPanel Orientation="Horizontal" Grid.Row="1" Grid.Column="0">

                    <TextBlock Text="DTEQ" FontWeight="Bold" Margin="10 0 0 0" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="   Id:  " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding SelectedDteq.Id}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>

                    <TextBlock Text="   Supplier: " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding SelectedDteq.FedFrom.Tag}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text=", " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding SelectedDteq.FedFromId}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>



                    <TextBlock Text="   Cable Id:  " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding SelectedDteq.PowerCable.Id}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>

                    <TextBlock Text="   Loads:  " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding SelectedDteq.AssignedLoads.Count}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>

                    <TextBlock Text="        |       " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>

                    <TextBlock Text="LOAD" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="   Id:  " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding SelectedLoad.Id}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="   Fed From Id:  " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding SelectedLoad.FedFromId}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>

                    <TextBlock Text="   Cable Id:  " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding SelectedLoad.PowerCable.Id}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>

                    <TextBlock Text="        |       " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="Counts" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>

                    <TextBlock Text="   Dteq:  " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding ListManager.IDteqList.Count}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="   loads:  " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding ListManager.LoadList.Count}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="   Cables:  " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding ListManager.CableList.Count}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>

                    <TextBlock Text="        |       " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="Cables" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>

                    <TextBlock Text="   D:  " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding SelectedDteq.PowerCable.Type}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="   L:  " FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding SelectedLoad.PowerCable.Type}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                    <TextBlock Text="{Binding SelectedDteq.SCCR}" Margin="0" FontWeight="Bold" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                </StackPanel>
                <!--***********************************-->
                <!--***********************************-->
                <!--***********************************-->
            </Grid>

            <!--Below Dteq Grid-->
            <GridSplitter  Grid.Row="2" Grid.ColumnSpan="5" Panel.ZIndex="2" HorizontalAlignment="Stretch" VerticalAlignment="Bottom"   
                           Height="5" Background="AliceBlue" BorderBrush="DarkGray" BorderThickness="0"
                           Margin="3 0 3 0"/>

            <!--Above Load Grid-->
            <GridSplitter  Grid.Row="3" Grid.ColumnSpan="5" HorizontalAlignment="Stretch" VerticalAlignment="Bottom"
                           Height="5" Background="AliceBlue" BorderBrush="DarkGray" BorderThickness="0"
                           Margin="3 0 3 0"/>
        </Grid>



    </Grid>


</UserControl>
